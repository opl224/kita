rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSuperUser() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperUser == true;
    }

    match /users/{userId} {
      allow read;
      allow list: if isSuperUser();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || (isSuperUser() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likedBy']));
    }
    
    match /appState/{state} {
        allow read: if request.auth.uid != null;
        allow write: if isSuperUser();
    }
    
    match /userFeedback/{feedbackId} {
        allow create: if request.auth.uid != null;
    }

    match /posts/{postId} {
      allow read: if request.auth.uid != null;
      allow list: if request.auth.uid != null;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /groups/{groupId} {
        allow read, list: if request.auth.uid in resource.data.members;
        allow create: if request.auth.uid == request.resource.data.createdBy;
        allow delete: if request.auth.uid == resource.data.createdBy || isSuperUser();
        allow update: if request.auth.uid == resource.data.createdBy 
                       || (request.auth.uid in request.resource.data.members && !(request.auth.uid in resource.data.members));
                       
        match /messages/{messageId} {
            allow read, list: if request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
            allow create: if request.auth.uid == request.resource.data.senderId;
            allow delete: if request.auth.uid == resource.data.senderId;
        }
    }

    match /invitations/{invitationId} {
        allow read, update, delete: if request.auth.uid == resource.data.userId || isSuperUser();
        allow create: if isSuperUser();
        allow list: if request.auth.uid != null;
    }

    match /users/{userId}/notifications/{notificationId} {
      allow read, list, create: if request.auth.uid == userId || isSuperUser();
    }
  }
}
