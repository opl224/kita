
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSuperUser() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperUser == true;
    }
    
    function isGroupMember(groupId) {
        return get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
    }

    // Users collection
    match /users/{userId} {
      allow create: if request.resource.data.uid == userId;
      // The user can update their own profile.
      allow update: if isSignedIn() && isOwner(userId);
      // Any signed-in user can read any other user's profile (for avatars, names, etc.)
      // but not list all users unless they are a super user.
      allow get: if isSignedIn();
      allow list: if isSignedIn() && isSuperUser();
    }
    
    // appState collection
    match /appState/main {
        // Super users can write, any signed-in user can read.
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isSuperUser();
    }

    // userFeedback collection
    match /userFeedback/{feedbackId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn() && isSuperUser();
    }

    // Posts collection
    match /posts/{postId} {
        allow read: if isSignedIn();
        // User must be the owner to create, update, or delete a post.
        // On create, we check the incoming resource.
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        // On update/delete, we check the existing resource.
        allow update, delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Groups collection
    match /groups/{groupId} {
        // Members can read/get a specific group document.
        allow get: if isSignedIn() && isGroupMember(groupId);
        // To list groups, a user must be a member of the queried groups.
        // Firestore rules for list queries are implicitly checked against `get` rules for each doc.
        // We will rely on the client-side query `where('members', 'array-contains', user.uid)`
        // which Firestore security rules can enforce.
        allow list: if isSignedIn();

        // Only owner can update/delete
        allow update, delete: if isSignedIn() && isOwner(resource.data.createdBy);
        // Only super users can create groups
        allow create: if isSignedIn() && isSuperUser();
    }
    
    // Messages sub-collection
    match /groups/{groupId}/messages/{messageId} {
        // Members of the parent group can read and create messages
        allow read, create: if isSignedIn() && isGroupMember(groupId);
        // Only the sender can delete their own message (checking existing resource)
        allow delete: if isSignedIn() && isOwner(resource.data.senderId);
    }
    
    // Invitations collection
    match /invitations/{invitationId} {
        allow create: if isSignedIn() && isSuperUser();
        // The invited user can act on their invitation
        allow update: if isSignedIn() && isOwner(resource.data.userId);
        // Any authenticated user can query for their own invitations
        allow list, get: if isSignedIn();
    }
    
    // Notifications sub-collection within users
    match /users/{userId}/notifications/{notificationId} {
        // Only the user can read their own notifications
        allow read, list: if isSignedIn() && isOwner(userId);
        // Only super users can create notifications (add money)
        allow create: if isSignedIn() && isSuperUser();
    }
  }
}
