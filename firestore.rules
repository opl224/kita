rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSuperUser() {
      // Check if the user document exists and the isSuperUser field is true.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperUser == true;
    }

    match /users/{userId} {
      // Allow user to read and write their own document
      allow read, update: if request.auth.uid == userId;
      // Allow logged-in users to read public-facing data of other users
      allow get: if request.auth.uid != null;
    }

    // Notifications are now a sub-collection of users
    match /users/{userId}/notifications/{notificationId} {
      // Allow the user themselves or a superuser to read notifications.
      // Only the target user can write (this is handled by the cloud function/backend logic that creates notifications).
      allow read: if request.auth.uid == userId || isSuperUser();
      allow write: if isSuperUser(); // Allow superuser to create notifications (e.g., adding money)
    }
    
    match /appState/{state} {
      allow read: if request.auth.uid != null;
      allow write: if isSuperUser();
    }

    match /posts/{postId} {
      allow read, create: if request.auth.uid != null;
      allow update, delete: if resource.data.userId == request.auth.uid;
    }
    
    match /userFeedback/{feedbackId} {
      allow create: if request.auth.uid != null;
      allow read: if isSuperUser();
    }

    match /groups/{groupId} {
      // Allow members to get the group document.
      allow get: if resource.data.members.hasAny([request.auth.uid]);
      // Allow any authenticated user to list groups they are a member of.
      allow list: if request.auth.uid != null && request.auth.uid in resource.data.members;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid == resource.data.createdBy || isSuperUser();
      allow delete: if request.auth.uid == resource.data.createdBy || isSuperUser();

      match /messages/{messageId} {
        allow read, create: if exists(/databases/$(database)/documents/groups/$(groupId)) &&
                              get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow delete: if exists(/databases/$(database)/documents/groups/$(groupId)) &&
                       get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]) &&
                       resource.data.senderId == request.auth.uid;
      }
    }
    
    match /invitations/{invitationId} {
      allow read, create: if isSuperUser();
      allow update: if request.auth.uid == resource.data.userId; // User can accept/reject their own invitation
    }
  }
}
