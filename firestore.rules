
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSuperUser() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperUser == true;
    }

    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isSuperUser());
      allow update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow list: if isSuperUser();

      match /notifications/{notificationId} {
        allow read, create: if request.auth.uid == userId || isSuperUser();
      }
    }
    
    match /groups/{groupId} {
      allow read, update, delete: if resource.data.createdBy == request.auth.uid || isSuperUser();
      allow create: if request.auth.uid == request.resource.data.createdBy;
      
      match /messages/{messageId} {
        allow read, create: if get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
        allow delete: if request.auth.uid == resource.data.senderId;
      }
    }
    
    match /posts/{postId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.uid == resource.data.userId;
    }
    
    match /appState/{stateId} {
        allow read: if true;
        allow write: if isSuperUser();
    }
    
    match /userFeedback/{feedbackId} {
        allow create: if request.auth.uid == request.resource.data.userId;
        allow read: if isSuperUser();
    }

    match /invitations/{invitationId} {
      allow create: if isSuperUser();
      allow read, update: if request.auth.uid == resource.data.userId;
    }
  }
}
